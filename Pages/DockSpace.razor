@inject InputService input_service;
@inject DockData dock_data;

@implements IDisposable

<style>
    :root {
        --FontColorHigh: #00FFC2;
        --FontColorLow: #00FFC2;
        --FontColorLime: #8DFFA7;
        --FontColorLimeLow: #00FF66;
        --DividerColorA: gray;
        --UIFont: normal normal bold 24px Segoe UI;
        --UIFontNormal: normal normal normal 24px Segoe UI;
        --BarHighlight: white;
        --DarkCover1: #00000082;
        --TealCoverLight: #00fff347;
        --ListLabelBackgroundColor: #141414;
        --ListElementBackgroundColor: #1d1d1d;
    }

    .container{
        position: absolute;
        top: 0px;
        left: 0px;
        width: @Width;
        height: @Height;
        background-color: lightblue;
        font: var(--UIFontNormal);
    }

    .dock{
        position: absolute;
        width: 369px;
        height: min-content;
        background-color: red;
        display: grid;
        grid-template-rows: 20px 50px minmax(10px, 50px);
        overflow: hidden;
        box-sizing: border-box;
    }

    .docktitle{
        grid-row: 1;
        background-color: black;
    }

    .docktabs{
        margin: 0px 4px;
        position: relative;
        top: 0px;
        left: 0px;
        grid-row: 2;
        display: grid;
        grid-auto-columns: minmax(auto, 100px);
        grid-auto-flow: column;
        box-sizing: border-box;
        overflow: hidden;
        gap: 4px;
    }

    .docktab{
        white-space: nowrap;
        position: relative;
        width: 100%;
        min-width: 100%;
        background-color: lightgray;
        border-radius: 5px 5px 0px 0px;
        overflow: hidden;
        text-overflow: ellipsis;
        align-self: center;
        display: block;
        padding: 10px 0px 10px 4px;
        box-sizing: border-box;
    }
    
    .dockcontent{
        margin: 0px 4px 4px;
        grid-row: 3;
        position: relative;
        top: 0px;
        left: 0px;
        background-color: gray;
        overflow: hidden;
        place-self: stretch;
    }

    .dockcontent > .innercontent{
    }
</style>

@* <div class="container" @onmousedown=@OnContainerMouseDown @onmouseup=@OnContainerMouseUp @onmouseover=@OnMouseOver @onmousemove=@OnMouseMove @onclick=@OnClick @ondragover=@OnDragOver>*@
<div key="container" class="container" @onmousemove=@event_actions.Events[EventActionGroup.OnMouseMove] @onmousedown=@event_actions.Events[EventActionGroup.OnMouseDown]>
    @foreach(DockInstance dock in dock_data.Dock_Map.Values){        
        string id=dock.Dock_ID;
        <Dock @key=@id ID=@id parent_events=@event_actions />
    }
</div>

@code {
    [Parameter]
    public string Width {get; set;} = "100%";
    
    [Parameter]
    public string Height {get; set;} = "100%";

    public EventActionGroup event_actions { get; set; } = new EventActionGroup
    {
        ID = "Container",
    };

    protected override async Task OnInitializedAsync() {
        //Initialize actions here.
        this.event_actions.FiredEvents[EventActionGroup.OnMouseDown] += (event_data) =>
        {
            var med = event_data as MouseEventData;

            Console.WriteLine(med.MouseArgs.ScreenX+":"+med.MouseArgs.ScreenY);

            Console.WriteLine("Source: " + med.Source + " Target: " + med.Target);
        };

        this.event_actions.FiredEvents[EventActionGroup.OnMouseMove] += (event_data) =>
        {
            //var med = event_data as MouseEventData;
            //Console.WriteLine("MOVING: "+med.MouseArgs.ScreenX+":"+med.MouseArgs.ScreenY);
        };

        input_service.RegisterElement(this.event_actions);
        /*
            _ = Task.Run(async ()=>{
                await Task.Delay(4000);
                dock_data.Dock_Map.Remove(dock_data.Dock_Map.Keys.FirstOrDefault());
                Console.WriteLine("doing the thing");
                this.StateHasChanged();
            });
        */
        await Task.CompletedTask;
    }

    public void Dispose(){
        input_service.UnregisterElement(event_actions);
    }
}
